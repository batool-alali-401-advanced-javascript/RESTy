{"version":3,"sources":["components/Form/form.js","components/Header/header.js","components/Footer/footer.js","App.js","serviceWorker.js","index.js"],"names":["Form","props","handleChange","e","url","target","value","console","log","state","setState","handleClickGo","full","method","handleClickGet","handleClickPost","handleClickPut","handleClickDelete","className","type","onChange","this","id","onClick","React","Component","Header","Footer","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"+RAgEiBA,G,wDA3Db,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAQRC,aAAe,SAACC,GACZ,IAAMC,EAAMD,EAAEE,OAAOC,MACrBC,QAAQC,IAAIJ,GACZG,QAAQC,IAAI,EAAKC,MAAML,KACvB,EAAKM,SAAS,CAAEN,IAAKA,KAbN,EAiBnBO,cAAgB,SAACR,GACb,EAAKO,SAAS,CAACE,KAAK,GAAD,OAAK,EAAKH,MAAMI,OAAhB,gBAA8B,EAAKJ,MAAML,IAAzC,QAlBJ,EAqBnBU,eAAiB,SAACX,GACd,EAAKO,SAAS,CAAEG,OAAQ,SAtBT,EAwBnBE,gBAAkB,SAACZ,GACf,EAAKO,SAAS,CAAEG,OAAQ,UAzBT,EA2BnBG,eAAiB,SAACb,GACd,EAAKO,SAAS,CAAEG,OAAQ,SA5BT,EA8BnBI,kBAAoB,SAACd,GACjB,EAAKO,SAAS,CAAEG,OAAQ,YA7B1B,EAAKJ,MAAQ,CACTL,IAAK,GACLS,OAAO,GACPD,KAAK,IALQ,E,qDAmCnB,OACI,0BAAMM,UAAU,YACZ,yBAAKA,UAAU,QACX,2BAAOA,UAAU,YAAjB,QACA,2BAAOC,KAAK,OAAOD,UAAU,WAAWE,SAAUC,KAAKnB,eACvD,4BAAQgB,UAAU,SAASI,GAAG,KAAKC,QAASF,KAAKV,eAAjD,OACA,6BACA,4BAAQO,UAAU,SAASI,GAAG,MAAMC,QAASF,KAAKP,gBAAlD,OACA,4BAAQI,UAAU,SAASI,GAAG,OAAOC,QAASF,KAAKN,iBAAnD,QACA,4BAAQG,UAAU,SAASI,GAAG,MAAMC,QAASF,KAAKL,gBAAlD,OACA,4BAAQE,UAAU,SAASI,GAAG,SAASC,QAASF,KAAKJ,mBAArD,WAGR,yBAAKC,UAAU,cAAcG,KAAKZ,MAAMG,W,GAjD7BY,IAAMC,Y,MCDV,SAASC,IACtB,OACE,yBAAKR,UAAU,aACb,wBAAIA,UAAU,SAAd,U,UCKSS,EARA,WACb,OACE,yBAAKT,UAAU,UACb,uBAAGA,UAAU,aAAb,4BCSSU,MAVf,WACE,OACE,oCACA,kBAACF,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,QCEgBG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLvC,QAAQuC,MAAMA,EAAMC,c","file":"static/js/main.562049a3.chunk.js","sourcesContent":["import React from \"react\";\r\nimport './form.scss';\r\n\r\n\r\nclass Form extends React.Component {\r\n    constructor(props) {\r\n      super(props);\r\n      this.state = { \r\n          url: '',\r\n          method:'',\r\n          full:'',\r\n     };\r\n    }\r\n\r\n    handleChange = (e) =>{\r\n        const url = e.target.value;\r\n        console.log(url);\r\n        console.log(this.state.url);\r\n        this.setState({ url: url });\r\n\r\n    };\r\n\r\n    handleClickGo = (e) => {\r\n        this.setState({full: `${this.state.method}     ${this.state.url} `})\r\n    };\r\n\r\n    handleClickGet = (e) => {\r\n        this.setState({ method: 'get' });\r\n    };\r\n    handleClickPost = (e) => {\r\n        this.setState({ method: 'post' });\r\n    };\r\n    handleClickPut = (e) => {\r\n        this.setState({ method: 'put' });\r\n    };\r\n    handleClickDelete = (e) => {\r\n        this.setState({ method: 'delete' });\r\n    };\r\n    \r\n  render() {\r\n    return (\r\n        <main className=\"mainForm\">\r\n            <div className='form'>\r\n                <label className=\"urlLabel\">URL:</label>\r\n                <input type=\"text\" className='urlInput' onChange={this.handleChange} />\r\n                <button className='method' id='go' onClick={this.handleClickGo}>Go!</button>\r\n                <br></br>\r\n                <button className='method' id='get' onClick={this.handleClickGet}>GET</button>\r\n                <button className='method' id='post' onClick={this.handleClickPost}>POST</button>\r\n                <button className='method' id='put' onClick={this.handleClickPut}>PUT</button>\r\n                <button className='method' id='delete' onClick={this.handleClickDelete}>DELETE</button>\r\n            </div>\r\n       \r\n        <div className='fullMethod'>{this.state.full}</div>\r\n\r\n\r\n\r\n      </main>\r\n    );\r\n  }\r\n}\r\n\r\n\r\n  \r\n  export default Form;\r\n","import React from \"react\";\r\nimport './header.scss';\r\n\r\nexport default function Header() {\r\n  return (\r\n    <div className=\"headerDiv\">\r\n      <h1 className=\"title\">RESTy</h1>\r\n    </div>\r\n  );\r\n}","import './footer.scss'\r\nimport React from \"react\";\r\n\r\nconst Footer = () => {\r\n  return (\r\n    <div className=\"footer\">\r\n      <p className=\"copyRight\"> Â© 2020 Code Fellow</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Footer;","import React from 'react';\nimport Form from \"./components/Form/form.js\";\nimport Header from \"./components/Header/header.js\";\nimport Footer from \"./components/Footer/footer.js\";\n\nfunction App() {\n  return (\n    <>\n    <Header />\n    <Form />\n    <Footer/>\n  </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}